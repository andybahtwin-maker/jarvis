#!/usr/bin/env bash
set -euo pipefail

# --- settings ---
SCAN_ROOT="${1:-$HOME}"           # default scan: your HOME
VAULT="$HOME/.jarvis/.env"        # consolidated vault
LOGDIR="$HOME/Jarvis/results"
IGNORE_FILE="$HOME/.jarvis/envscan.ignore"
LLAMA_MODEL="${LLAMA_MODEL:-llama3.2:3b}"  # override if you like
ASK_LLAMA="${ASK_LLAMA:-true}"    # set to "false" to skip llama summary
mkdir -p "$(dirname "$VAULT")" "$LOGDIR"
touch "$VAULT"
chmod 600 "$VAULT"

STAMP="$(date +'%Y%m%d_%H%M%S')"
RUNLOG="$LOGDIR/envscan_${STAMP}.log"
DIFFTXT="$LOGDIR/envscan_diff_${STAMP}.txt"

# --- default ignore globs (can extend in $IGNORE_FILE) ---
# We try to avoid huge/noisy trees and OS dirs you can’t read.
DEFAULT_IGNORES=(
  "*/node_modules/*"
  "*/.git/*"
  "*/.cache/*"
  "*/.venv/*"
  "*/Library/*"            # macOS user Library can be noisy
  "/proc/*" "/sys/*" "/dev/*" "/run/*" "/var/*" "/tmp/*"  # system
)

echo "[info] scanning: $SCAN_ROOT" | tee -a "$RUNLOG"

# build find command with ignores
FIND_ARGS=( "$SCAN_ROOT" -type f \( -name ".env" -o -name ".env.*" -o -name ".envrc" -o -name "*.env" \) 2>/dev/null )
for pat in "${DEFAULT_IGNORES[@]}"; do
  FIND_ARGS=( -path "$pat" -prune -o "${FIND_ARGS[@]}" )
done

# user-specified ignores (one glob per line) in ~/.jarvis/envscan.ignore
if [[ -s "$IGNORE_FILE" ]]; then
  while IFS= read -r pat; do
    [[ -z "$pat" || "$pat" =~ ^# ]] && continue
    FIND_ARGS=( -path "$pat" -prune -o "${FIND_ARGS[@]}" )
  done < "$IGNORE_FILE"
fi

TMPDIR="$(mktemp -d)"
FOUND="$TMPDIR/found.txt"
PARSED="$TMPDIR/parsed.txt"
SORTED="$TMPDIR/sorted.txt"
OLD_VAULT="$TMPDIR/old_vault.txt"

# 1) find candidate files
# shellcheck disable=SC2068
eval find ${FIND_ARGS[@]} -print | tee "$FOUND" >> "$RUNLOG"

# 2) extract KEY=VALUE lines robustly
#   - allow "export KEY=val"
#   - allow quotes: KEY="val with spaces"
#   - ignore comments & blanks
while IFS= read -r f; do
  echo "[file] $f" >> "$RUNLOG"
  # remove comments (# ...) but keep # inside quotes
  # then capture lines that look like assignments
  awk '
    BEGIN { FS="=" }
    /^[[:space:]]*(export[[:space:]]+)?[A-Za-z_][A-Za-z0-9_]*[[:space:]]*=/ {
      line=$0
      # strip leading "export"
      sub(/^[[:space:]]*export[[:space:]]+/, "", line)
      # strip inline comment outside quotes
      # crude but effective: replace quoted regions temporarily
      gsub(/\\"/,"",line)
      # normalize spaces around =
      sub(/[[:space:]]*=[[:space:]]*/,"=",line)
      print line
    }
  ' "$f" || true
done < "$FOUND" > "$PARSED"

# normalize quotes (KEY="x y" -> KEY=x y), keep raw otherwise
# NOTE: we do not escape newlines; if present they’ll be kept as-is
awk -F= '
  NF>=2 {
    key=$1
    sub(/[[:space:]]+$/,"",key)
    val=$0; sub(/^[^=]*=/,"",val)
    # strip matching single or double quotes
    if ((val ~ /^".*"$/) || (val ~ /^'\''.*'\''$/)) {
      sub(/^["'\'']/, "", val)
      sub(/["'\'']$/, "", val)
    }
    print key"="val
  }
' "$PARSED" | sed '/^[[:space:]]*$/d' > "$SORTED"

# 3) compute a diff (names only, no values in summary)
cp "$VAULT" "$OLD_VAULT"
chmod 600 "$OLD_VAULT" || true

# 4) merge into vault (latest wins)
# delete existing key before appending new one
while IFS='=' read -r k v; do
  [[ -z "${k:-}" ]] && continue
  tmp="$TMPDIR/$$.vault"
  grep -v -E "^${k}=" "$VAULT" > "$tmp" 2>/dev/null || true
  mv "$tmp" "$VAULT"
  printf '%s=%s\n' "$k" "$v" >> "$VAULT"
done < "$SORTED"
chmod 600 "$VAULT"

# 5) produce a redacted diff report (key names only)
{ echo "Added/changed keys:"
  comm -13 <(cut -d= -f1 "$OLD_VAULT" | sort) <(cut -d= -f1 "$VAULT" | sort) || true
  echo
  echo "Removed keys:"
  comm -23 <(cut -d= -f1 "$OLD_VAULT" | sort) <(cut -d= -f1 "$VAULT" | sort) || true
} > "$DIFFTXT"

echo "[ok] vault updated: $VAULT" | tee -a "$RUNLOG"
echo "[diff] $DIFFTXT" | tee -a "$RUNLOG"

# 6) optional llama summary of changes (no values shown)
if [[ "$ASK_LLAMA" == "true" ]]; then
  if command -v ollama >/dev/null 2>&1; then
    PROMPT=$(cat <<P
You are Jarvis, my assistant. I just updated my local .env vault on this machine.
Summarize the high-level changes below (DO NOT print any secrets, only key names).
Suggest any obvious normalizations (e.g., duplicate keys across services, naming inconsistencies).

=== KEY CHANGES (names only) ===
$(cat "$DIFFTXT")
P
)
    echo "### Env Scan Summary ($(date))" > "$LOGDIR/envscan_summary_${STAMP}.md"
    echo -e "#### Prompt\n\`\`\`\n$PROMPT\n\`\`\`\n\n#### Response\n\`\`\`" >> "$LOGDIR/envscan_summary_${STAMP}.md"
    ollama run "$LLAMA_MODEL" "$PROMPT" >> "$LOGDIR/envscan_summary_${STAMP}.md" 2>>"$RUNLOG" || echo "[warn] ollama run failed" >> "$RUNLOG"
    echo -e "\n\`\`\`" >> "$LOGDIR/envscan_summary_${STAMP}.md"
    echo "[ok] llama summary: $LOGDIR/envscan_summary_${STAMP}.md" | tee -a "$RUNLOG"
  else
    echo "[info] ollama not found; skipping llama summary" >> "$RUNLOG"
  fi
fi

# cleanup
rm -rf "$TMPDIR"
